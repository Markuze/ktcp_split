From ceef0d0c0c34848185fe06057aeae542afc47336 Mon Sep 17 00:00:00 2001
From: Build VM <build@example.com>
Date: Sun, 15 Dec 2019 17:07:28 +0000
Subject: [PATCH 04/24] for some reason not created under correct dir

---
 drivers/net/virtio_net.c | 43 +++++++++++++++++++++++-----------------
 1 file changed, 25 insertions(+), 18 deletions(-)

diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 52162a1df..edfa09087 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -37,6 +37,7 @@
 #include <linux/seq_file.h>
 #include <linux/string.h>
 
+#define VIRTIO_RX_POLL_MAX	64
 static int napi_weight = 4; //NAPI_POLL_WEIGHT;
 module_param(napi_weight, int, 0444);
 
@@ -1261,7 +1262,7 @@ static int virtnet_poll(struct napi_struct *napi, int budget)
 	//virtnet_poll_cleantx(rq);
 
 	stats->rx_napi++;
-	received = virtnet_receive(rq, budget << 1, &xdp_xmit);
+	received = virtnet_receive(rq, budget + 4, &xdp_xmit);
 
 	/* Out of packets? */
 	if (received < budget) {
@@ -1270,7 +1271,7 @@ static int virtnet_poll(struct napi_struct *napi, int budget)
 		napi->weight = (received < 4) ? 4 : received;
 	} else {
 		/* Received will not exceed budget...*/
-		napi->weight = (received > 64) ? 64 : received;
+		napi->weight = (received > VIRTIO_RX_POLL_MAX) ? VIRTIO_RX_POLL_MAX : received;
 	}
 
 #if 0
@@ -1291,7 +1292,7 @@ static int virtnet_poll(struct napi_struct *napi, int budget)
 		xdp_do_flush_map();
 	}
 
-	return received;
+	return (budget < received) ? budget : received;
 }
 
 static int virtnet_open(struct net_device *dev)
@@ -1341,7 +1342,7 @@ static int virtnet_poll_tx(struct napi_struct *napi, int budget)
 
 	if (netif_xmit_stopped(txq)) {
 		virtqueue_irq_reanble(napi, sq->vq);
-		trace_printk("%d: Q[%p] IRQ Reanbaled\n", smp_processor_id(), txq);
+		trace_printk("<%d>: Q[%p] IRQ Reanbaled\n", smp_processor_id(), txq);
 	}
 
 	return 0;
@@ -1438,7 +1439,7 @@ static netdev_tx_t start_xmit(struct sk_buff *skb, struct net_device *dev)
 	 */
 	if (sq->vq->num_free < 2+MAX_SKB_FRAGS) {
 		netif_stop_subqueue(dev, qnum);
-		trace_printk("%d: Q[%p] stopped\n", smp_processor_id(), txq);
+		trace_printk("%d: Q[%p] stopped (%s)\n", smp_processor_id(), txq, in_task() ? "IN TASK":"IN_SW_IRQ");
 		if (unlikely(!virtqueue_enable_cb_delayed(sq->vq))) {
 			/* More just got used, free them then recheck. */
 			free_old_xmit_skbs(sq);
@@ -1450,7 +1451,7 @@ static netdev_tx_t start_xmit(struct sk_buff *skb, struct net_device *dev)
 	}
 
 	if (kick || netif_xmit_stopped(txq)) {
-		 struct virtnet_stats *stats = this_cpu_ptr(vi->stats);
+		struct virtnet_stats *stats = this_cpu_ptr(vi->stats);
 		stats->tx_kick++;
 		virtqueue_kick(sq->vq);
 	}
@@ -2636,14 +2637,19 @@ static int virtio_net_show(struct seq_file *m, void *v)
 
 	for_each_possible_cpu(cpu) {
 		struct virtnet_stats *stats = per_cpu_ptr(vi->stats, cpu);
+		struct netdev_queue *txq = netdev_get_tx_queue(vi->dev, cpu);
 		tx_kick			+= stats->tx_kick;
 		tx_packets		+= stats->tx_packets;
 		rx_napi			+= stats->rx_napi;
 		rx_napi_complete	+= stats->rx_napi_complete;
 		rx_packets		+= stats->rx_packets;
+		seq_printf(m, "%d: RX:\n\t%020lld\n\t%020lld\n\t%020lld\n", cpu,
+				stats->rx_packets, stats->rx_napi, stats->rx_napi_complete);
+		seq_printf(m, "%d: TX:\n\t%020lld\n\t%020lld\nQ: %s\n", cpu, stats->tx_packets, stats->tx_kick,
+				netif_xmit_stopped(txq) ? "STOPPED!":"OK");
 	}
-	seq_printf(m, "RX:\n\t%-20lld\n\t%-20lld\n\t%-20lld\n", rx_packets, rx_napi, rx_napi_complete);
-	seq_printf(m, "TX:\n\t%-20lld\n\t%-20lld\n", tx_packets, tx_kick);
+	seq_printf(m, "\nTotal RX:\n\t%-20lld\n\t%-20lld\n\t%-20lld\n", rx_packets, rx_napi, rx_napi_complete);
+	seq_printf(m, "Total TX:\n\t%-20lld\n\t%-20lld\n", tx_packets, tx_kick);
         return 0;
 }
 
@@ -2662,6 +2668,15 @@ static const struct file_operations stats_fops = {
 
 static struct proc_dir_entry *virtio_net_dir;
 
+static int virtio_net_proc_init(void)
+{
+	virtio_net_dir = proc_mkdir_mode("virtio_net", 00555, NULL);
+	if (!virtio_net_dir) {
+		pr_err("couldnt create virtio_net_dir\n");
+		return -1;
+	}
+	return 0;
+}
 
 static int virtnet_probe(struct virtio_device *vdev)
 {
@@ -2854,6 +2869,8 @@ static int virtnet_probe(struct virtio_device *vdev)
 		if (virtio_has_feature(vi->vdev, guest_offloads[i]))
 			set_bit(guest_offloads[i], &vi->guest_offloads);
 
+	if (virtio_net_dir)
+		virtio_net_proc_init();
 	if (!proc_create_data(dev->name, 00444, virtio_net_dir, &stats_fops, vi))
 		pr_err("Failed to create %s\n", dev->name);
 	pr_info("virtnet: registered device %s with %d RX and TX vq's\n",
@@ -2980,16 +2997,6 @@ static struct virtio_driver virtio_net_driver = {
 #endif
 };
 
-static __init int virtio_net_proc_init(void)
-{
-	virtio_net_dir = proc_mkdir_mode("virtio_net", 00555, NULL);
-	if (!virtio_net_dir) {
-		pr_err("couldnt create virtio_net_dir\n");
-		return -1;
-	}
-	return 0;
-}
-
 static __init int virtio_net_driver_init(void)
 {
 	int ret;
-- 
2.17.1

