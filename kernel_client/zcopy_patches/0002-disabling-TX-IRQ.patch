From 79b06c97c61a4a9c91814cb3657310fad9b9582b Mon Sep 17 00:00:00 2001
From: Build VM <build@example.com>
Date: Mon, 9 Dec 2019 13:07:46 +0000
Subject: [PATCH 02/24] :disabling TX IRQ

---
 drivers/net/virtio_net.c | 49 ++++++++++++++++++++++++++++------------
 include/linux/skbuff.h   |  6 ++---
 2 files changed, 37 insertions(+), 18 deletions(-)

diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 2b6916c01..fddc4db08 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -260,6 +260,16 @@ static void virtqueue_napi_schedule(struct napi_struct *napi,
 	}
 }
 
+static void virtqueue_irq_reanble(struct napi_struct *napi, struct virtqueue *vq)
+{
+	int opaque;
+
+	opaque = virtqueue_enable_cb_prepare(vq);
+	if (unlikely(virtqueue_poll(vq, opaque))) {
+		virtqueue_napi_schedule(napi, vq);
+	}
+}
+
 static void virtqueue_napi_complete(struct napi_struct *napi,
 				    struct virtqueue *vq, int processed)
 {
@@ -274,6 +284,7 @@ static void virtqueue_napi_complete(struct napi_struct *napi,
 	}
 }
 
+/* TX IRQ CB*/
 static void skb_xmit_done(struct virtqueue *vq)
 {
 	struct virtnet_info *vi = vq->vdev->priv;
@@ -1064,6 +1075,7 @@ static bool try_fill_recv(struct virtnet_info *vi, struct receive_queue *rq,
 	return !oom;
 }
 
+/* RX IRQ */
 static void skb_recv_done(struct virtqueue *rvq)
 {
 	struct virtnet_info *vi = rvq->vdev->priv;
@@ -1167,7 +1179,7 @@ static int virtnet_receive(struct receive_queue *rq, int budget, bool *xdp_xmit)
 	return received;
 }
 
-static void free_old_xmit_skbs(struct send_queue *sq)
+/*static*/ void free_old_xmit_skbs(struct send_queue *sq)
 {
 	struct sk_buff *skb;
 	unsigned int len;
@@ -1226,6 +1238,7 @@ static void virtnet_poll_cleantx(struct receive_queue *rq)
 		netif_tx_wake_queue(txq);
 }
 
+/*MA: RX NAPI CB */
 static int virtnet_poll(struct napi_struct *napi, int budget)
 {
 	struct receive_queue *rq =
@@ -1243,6 +1256,9 @@ static int virtnet_poll(struct napi_struct *napi, int budget)
 	if (received < budget)
 		virtqueue_napi_complete(napi, rq->vq, received);
 
+	trace_printk("Budget %d received %d\n", budget, received);
+	napi->weight = received;
+
 	if (xdp_xmit) {
 		qp = vi->curr_queue_pairs - vi->xdp_queue_pairs +
 		     smp_processor_id();
@@ -1271,6 +1287,7 @@ static int virtnet_open(struct net_device *dev)
 	return 0;
 }
 
+/*MA: TX NAPI CB */
 static int virtnet_poll_tx(struct napi_struct *napi, int budget)
 {
 	struct send_queue *sq = container_of(napi, struct send_queue, napi);
@@ -1288,12 +1305,21 @@ static int virtnet_poll_tx(struct napi_struct *napi, int budget)
 	__netif_tx_lock(txq, raw_smp_processor_id());
 	free_old_xmit_skbs(sq);
 	__netif_tx_unlock(txq);
+	trace_printk("%d) TX IRQ[%p] napi poll\n", smp_processor_id(), txq);
 
-	virtqueue_napi_complete(napi, sq->vq, 0);
+	/*MA: re-enables IRQs,
+		Why is it using 0?  */
+	//virtqueue_napi_complete(napi, sq->vq, 0);
+	napi_complete_done(napi, 0);
 
 	if (sq->vq->num_free >= 2 + MAX_SKB_FRAGS)
 		netif_tx_wake_queue(txq);
 
+	if (netif_xmit_stopped(txq)) {
+		virtqueue_irq_reanble(napi, sq->vq);
+		trace_printk("%d: Q[%p] IRQ Reanbaled\n", smp_processor_id(), txq);
+	}
+
 	return 0;
 }
 
@@ -1306,8 +1332,6 @@ static int xmit_skb(struct send_queue *sq, struct sk_buff *skb)
 	unsigned hdr_len = vi->hdr_len;
 	bool can_push;
 
-	pr_debug("%s: xmit %p %pM\n", vi->dev->name, skb, dest);
-
 	can_push = vi->any_header_sg &&
 		!((unsigned long)skb->data & (__alignof__(*hdr) - 1)) &&
 		!skb_header_cloned(skb) && skb_headroom(skb) >= hdr_len;
@@ -1352,14 +1376,11 @@ static netdev_tx_t start_xmit(struct sk_buff *skb, struct net_device *dev)
 	int err;
 	struct netdev_queue *txq = netdev_get_tx_queue(dev, qnum);
 	bool kick = !skb->xmit_more;
-	bool use_napi = sq->napi.weight;
 
 	/* Free up any pending old buffers before queueing new ones. */
+	/* MA: Only do this is Q is long and, avoid trushing... */
 	free_old_xmit_skbs(sq);
 
-	if (use_napi && kick)
-		virtqueue_enable_cb_delayed(sq->vq);
-
 	/* timestamp packet in software */
 	skb_tx_timestamp(skb);
 
@@ -1378,10 +1399,8 @@ static netdev_tx_t start_xmit(struct sk_buff *skb, struct net_device *dev)
 	}
 
 	/* Don't wait up for transmitted skbs to be freed. */
-	if (!use_napi) {
-		skb_orphan(skb);
-		nf_reset(skb);
-	}
+	skb_orphan(skb);
+	nf_reset(skb);
 
 	/* If running out of space, stop queue to avoid getting packets that we
 	 * are then unable to transmit.
@@ -1395,8 +1414,8 @@ static netdev_tx_t start_xmit(struct sk_buff *skb, struct net_device *dev)
 	 */
 	if (sq->vq->num_free < 2+MAX_SKB_FRAGS) {
 		netif_stop_subqueue(dev, qnum);
-		if (!use_napi &&
-		    unlikely(!virtqueue_enable_cb_delayed(sq->vq))) {
+		trace_printk("%d: Q[%p] stopped\n", smp_processor_id(), txq);
+		if (unlikely(!virtqueue_enable_cb_delayed(sq->vq))) {
 			/* More just got used, free them then recheck. */
 			free_old_xmit_skbs(sq);
 			if (sq->vq->num_free >= 2+MAX_SKB_FRAGS) {
@@ -2931,5 +2950,5 @@ static __exit void virtio_net_driver_exit(void)
 module_exit(virtio_net_driver_exit);
 
 MODULE_DEVICE_TABLE(virtio, id_table);
-MODULE_DESCRIPTION("Virtio network driver");
+MODULE_DESCRIPTION("Virtio network driver no IRQ");
 MODULE_LICENSE("GPL");
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 27425284e..1c4ac5323 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -582,7 +582,7 @@ typedef unsigned int sk_buff_data_t;
 typedef unsigned char *sk_buff_data_t;
 #endif
 
-/** 
+/**
  *	struct sk_buff - socket buffer
  *	@next: Next buffer in list
  *	@prev: Previous buffer in list
@@ -882,7 +882,7 @@ static inline bool skb_pfmemalloc(const struct sk_buff *skb)
  */
 static inline struct dst_entry *skb_dst(const struct sk_buff *skb)
 {
-	/* If refdst was not refcounted, check we still are in a 
+	/* If refdst was not refcounted, check we still are in a
 	 * rcu_read_lock section
 	 */
 	WARN_ON((skb->_skb_refdst & SKB_DST_NOREF) &&
@@ -2538,7 +2538,7 @@ static inline int __skb_grow(struct sk_buff *skb, unsigned int len)
  *	destructor function and make the @skb unowned. The buffer continues
  *	to exist but is no longer charged to its former owner.
  */
-static inline void skb_orphan(struct sk_buff *skb)
+static inline  void skb_orphan(struct sk_buff *skb)
 {
 	if (skb->destructor) {
 		skb->destructor(skb);
-- 
2.17.1

