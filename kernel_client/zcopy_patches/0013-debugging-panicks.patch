From e844ebc18f7fd3fc8e3a04059a833506b7513e01 Mon Sep 17 00:00:00 2001
From: Build VM <build@example.com>
Date: Sun, 29 Dec 2019 13:16:38 +0000
Subject: [PATCH 13/24] debugging panicks

---
 drivers/net/virtio_net.c |  5 +++--
 include/linux/tcp.h      |  1 +
 mm/page_alloc.c          |  2 ++
 net/ipv4/tcp.c           | 33 ++++++++++++++++++++++++---------
 4 files changed, 30 insertions(+), 11 deletions(-)

diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 46133fe5b..93f1064ab 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -2687,6 +2687,7 @@ static int virtnet_probe(struct virtio_device *vdev)
 	int mtu, cnt = 0;
 	char feat[256] = {0};
 
+	trace_printk("Hello...\n");
 	/* Find if host supports multiqueue virtio_net device */
 	err = virtio_cread_feature(vdev, VIRTIO_NET_F_MQ,
 				   struct virtio_net_config,
@@ -2778,12 +2779,12 @@ static int virtnet_probe(struct virtio_device *vdev)
 	    virtio_has_feature(vdev, VIRTIO_NET_F_GUEST_ECN) ||
 	    virtio_has_feature(vdev, VIRTIO_NET_F_GUEST_UFO)) {
 		vi->big_packets = true;
-		cnt += snprintf(feat[cnt], 32 , "BIG Packets ");
+		cnt += snprintf(&feat[cnt], 32 , "BIG Packets ");
 	}
 
 	if (virtio_has_feature(vdev, VIRTIO_NET_F_MRG_RXBUF)) {
 		vi->mergeable_rx_bufs = true;
-		cnt += snprintf(feat[cnt], 32 , "VIRTIO_NET_F_MRG_RXBUF");
+		cnt += snprintf(&feat[cnt], 32 , "VIRTIO_NET_F_MRG_RXBUF");
 	}
 	trace_printk("%s: %s\n", __FILE__, feat);
 
diff --git a/include/linux/tcp.h b/include/linux/tcp.h
index 6d516fb53..5f36ab150 100644
--- a/include/linux/tcp.h
+++ b/include/linux/tcp.h
@@ -451,6 +451,7 @@ static inline void tcp_saved_syn_free(struct tcp_sock *tp)
 
 struct sk_buff *tcp_get_timestamping_opt_stats(const struct sock *sk);
 int tcp_zcopy_rx(struct socket *sock, struct page **pages_array, unsigned int nr_pages);
+int tcp_read_sock_zcopy(struct socket *sock, struct kvec *pages_array, unsigned int nr_pages);
 
 
 static inline u16 tcp_mss_clamp(const struct tcp_sock *tp, u16 mss)
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 9a1b9f89e..9769e8281 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -4387,12 +4387,14 @@ void *page_frag_alloc(struct page_frag_cache *nc,
 		nc->pfmemalloc = page_is_pfmemalloc(page);
 		nc->pagecnt_bias = size + 1;
 		nc->offset = size;
+		trace_printk("%d) new page %p [%d:%d]\n", smp_processor_id(), page, page_ref_count(page), nc->pagecnt_bias);
 	}
 
 	offset = nc->offset - fragsz;
 	if (unlikely(offset < 0)) {
 		page = virt_to_page(nc->va);
 
+		trace_printk("%d) try reuse page %p [%d:%d]\n", smp_processor_id(), page, page_ref_count(page), nc->pagecnt_bias);
 		if (!page_ref_sub_and_test(page, nc->pagecnt_bias))
 			goto refill;
 
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index d44f1475c..bd7c477fd 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -3692,22 +3692,29 @@ int skb_zerocopy_rx(read_descriptor_t *desc_t, struct sk_buff *skb, u32 offset,
 	struct kvec_desc *desc = container_of(desc_t, struct kvec_desc, desc_t);
 
 	/*TODO: move to using read_descriptor_t, this w/a is gratuitous*/
-	desc_t->count = 1;
 
-	if (unlikely(!desc->nr_pages))
+	if (unlikely(!desc->nr_pages)) {
+		trace_printk("nr_pages = 0\n");
 		return -ENOMEM;
-
+	}
 	if (skb_headlen(skb) > offset) {
-		if (!(skb->head_frag))
+		if (!(skb->head_frag)) {
+			trace_printk("head_frag error...\n");
 			return -EINVAL;
+		}
 
 		desc->pages_array->iov_base = skb->data + offset;
 		desc->pages_array->iov_len = skb_headlen(skb) - offset;
 		copied = desc->pages_array->iov_len;
 		len -= copied;
-		offset = 0;
 
-		get_page(virt_to_head_page(skb->head));
+		get_page_unless_zero(virt_to_page(skb->head));
+		trace_printk("Head: %p<%d> [%lu/%d] [%d,%d] (?%d)",
+				virt_to_head_page(desc->pages_array->iov_base),
+				page_count(virt_to_page(desc->pages_array->iov_base)),
+				desc->pages_array->iov_len, len, copied, desc->nr_pages, offset);
+
+		offset = 0;
 		desc->pages_array++;
 		desc->nr_pages--;
 	}
@@ -3727,19 +3734,27 @@ int skb_zerocopy_rx(read_descriptor_t *desc_t, struct sk_buff *skb, u32 offset,
 		desc->pages_array->iov_len = skb_frag_size(frags) - offset;
 
 		offset = 0;
-		desc->pages_array++;
-		desc->nr_pages--;
 
 		len -= skb_frag_size(frags);
 		copied += skb_frag_size(frags);
 
+		trace_printk("Frag: %p[%d]<%d> [%lu/%d] [%d,%d]",
+				virt_to_head_page(desc->pages_array->iov_base), frags->page_offset + offset,
+				page_count(virt_to_page(desc->pages_array->iov_base)),
+				desc->pages_array->iov_len, len, copied, desc->nr_pages);
+
+		desc->pages_array++;
+		desc->nr_pages--;
+		frags++;
+
 		if (len <= 0)
 			break;
 	}
+	desc_t->count = desc->nr_pages;
 	return copied;
 }
 
-static int tcp_read_sock_zcopy(struct socket *sock, struct kvec *pages_array, unsigned int nr_pages)
+int tcp_read_sock_zcopy(struct socket *sock, struct kvec *pages_array, unsigned int nr_pages)
 {
 	struct kvec_desc desc = {.pages_array = pages_array, .nr_pages = nr_pages};
 
-- 
2.17.1

