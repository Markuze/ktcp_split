From f441795a0911ae72e4f961ac6b1820144a374f4d Mon Sep 17 00:00:00 2001
From: Build VM <build@example.com>
Date: Tue, 31 Dec 2019 14:59:35 +0000
Subject: [PATCH 18/24] skb_zerocopy_sg_from_iter

---
 net/core/datagram.c   | 60 +++++++++++++++++++++++++++++++++++++++++++
 net/core/skbuff.c     | 10 ++++----
 net/ipv4/tcp_output.c |  2 +-
 3 files changed, 66 insertions(+), 6 deletions(-)

diff --git a/net/core/datagram.c b/net/core/datagram.c
index 1c33dfab0..4b0790719 100644
--- a/net/core/datagram.c
+++ b/net/core/datagram.c
@@ -580,6 +580,66 @@ int skb_copy_datagram_from_iter(struct sk_buff *skb, int offset,
 }
 EXPORT_SYMBOL(skb_copy_datagram_from_iter);
 
+static inline ssize_t kvec_get_frag_advance(struct iov_iter *from,
+					struct page **page,
+					ssize_t *off, size_t len)
+{
+	ssize_t copied = 0;
+	struct kvec *kvec = &from->kvec[from->iov_offset];
+
+	*page = virt_to_page(kvec->iov_base);
+	*off = (unsigned long)kvec->iov_base & (~PAGE_MASK);
+	get_page(*page);
+
+	if (len >= kvec->iov_len) {
+		copied = kvec->iov_len;
+		kvec->iov_len = 0;
+		kvec->iov_base = 0;
+		from->iov_offset++;
+	} else {
+		copied = len;
+		kvec->iov_len -= copied;
+		kvec->iov_base += copied;
+	}
+	from->count -= copied;
+
+	return copied;
+}
+
+int skb_zerocopy_sg_from_iter(struct sock *sk, struct sk_buff *skb,
+			    struct iov_iter *from, size_t len)
+{
+	int frag = skb_shinfo(skb)->nr_frags;
+
+	while (len && iov_iter_count(from)) {
+		struct page *page = NULL;
+		unsigned long truesize;
+		ssize_t copied;
+		ssize_t offset;
+
+		if (frag == MAX_SKB_FRAGS)
+			return -EMSGSIZE;
+
+		copied = kvec_get_frag_advance(from, &page, &offset, len);
+		len -= copied;
+
+		truesize = copied;
+		skb->data_len += copied;
+		skb->len += copied;
+		skb->truesize += copied;
+
+		if (sk && sk->sk_type == SOCK_STREAM) {
+			sk->sk_wmem_queued += truesize;
+			sk_mem_charge(sk, truesize);
+		} else {
+			refcount_add(truesize, &skb->sk->sk_wmem_alloc);
+		}
+		skb_fill_page_desc(skb, frag++, page, offset, copied);
+	}
+	return 0;
+}
+EXPORT_SYMBOL(skb_zerocopy_sg_from_iter);
+
 int __zerocopy_sg_from_iter(struct sock *sk, struct sk_buff *skb,
 			    struct iov_iter *from, size_t length)
 {
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 65a18063f..930c93089 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -1039,7 +1039,7 @@ static bool skb_zerocopy_notify_extend(struct sk_buff *skb, u32 lo, u16 len)
 
 void sock_kern_zerocopy_cb(struct ubuf_info *uarg, bool success)
 {
-	struct sk_buff *tail, *skb = skb_from_uarg(uarg);
+	struct sk_buff *skb = skb_from_uarg(uarg);
 	struct sock *sk = skb->sk;
 	int i, num_frags = skb_shinfo(skb)->nr_frags;
 
@@ -1126,8 +1126,8 @@ void sock_zerocopy_put_abort(struct ubuf_info *uarg)
 }
 EXPORT_SYMBOL_GPL(sock_zerocopy_put_abort);
 
-extern int __zerocopy_sg_from_iter(struct sock *sk, struct sk_buff *skb,
-				   struct iov_iter *from, size_t length);
+extern int skb_zerocopy_sg_from_iter(struct sock *sk, struct sk_buff *skb,
+				    struct iov_iter *from, size_t length);
 
 int skb_zerocopy_iter_stream(struct sock *sk, struct sk_buff *skb,
 			     struct msghdr *msg, int len,
@@ -1143,8 +1143,8 @@ int skb_zerocopy_iter_stream(struct sock *sk, struct sk_buff *skb,
 	if (orig_uarg && uarg != orig_uarg)
 		return -EEXIST;
 
-	err = __zerocopy_sg_from_iter(sk, skb, &msg->msg_iter, len);
-	if (err == -EFAULT || (err == -EMSGSIZE && skb->len == orig_len)) {
+	err = skb_zerocopy_sg_from_iter(sk, skb, &msg->msg_iter, len);
+	if (err == -EMSGSIZE && skb->len == orig_len) {
 		struct sock *save_sk = skb->sk;
 
 		/* Streams do not free skb on error. Reset to prev state. */
diff --git a/net/ipv4/tcp_output.c b/net/ipv4/tcp_output.c
index bdc47cf15..38de8b5e0 100644
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@ -1635,7 +1635,7 @@ unsigned int tcp_current_mss(struct sock *sk)
 
 	return mss_now;
 }
-
+EXPORT_SYMBOL(tcp_current_mss);
 /* RFC2861, slow part. Adjust cwnd, after it was not full during one rto.
  * As additional protections, we do not touch cwnd in retransmission phases,
  * and if application hit its sndbuf limit recently.
-- 
2.17.1

