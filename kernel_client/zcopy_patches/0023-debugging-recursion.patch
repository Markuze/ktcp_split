From 75e98e4bc3ef47b1c85237561b871a73458b5d28 Mon Sep 17 00:00:00 2001
From: Build VM <build@example.com>
Date: Fri, 3 Jan 2020 17:20:12 +0000
Subject: [PATCH 23/24] debugging recursion

---
 include/linux/net.h | 2 ++
 net/core/datagram.c | 6 ++++--
 net/core/skbuff.c   | 2 ++
 net/socket.c        | 8 ++++++++
 4 files changed, 16 insertions(+), 2 deletions(-)

diff --git a/include/linux/net.h b/include/linux/net.h
index caeb159ab..3848e8015 100644
--- a/include/linux/net.h
+++ b/include/linux/net.h
@@ -282,6 +282,8 @@ do {									\
 #define net_get_random_once_wait(buf, nbytes)			\
 	get_random_once_wait((buf), (nbytes))
 
+int trace_sendmsg(struct socket *sock, struct msghdr *msg,
+		   struct kvec *vec, size_t num, size_t size);
 int kernel_sendmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,
 		   size_t num, size_t len);
 int kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg,
diff --git a/net/core/datagram.c b/net/core/datagram.c
index e2a7def3b..9e2e9f6a0 100644
--- a/net/core/datagram.c
+++ b/net/core/datagram.c
@@ -587,7 +587,7 @@ static inline ssize_t kvec_get_frag_advance(struct iov_iter *from,
 	ssize_t copied = 0;
 	struct kvec *kvec = &from->kvec[from->iov_offset];
 
-	trace_printk("kvec %p [%lu]\n", kvec, from->iov_offset);
+	trace_printk("%d: kvec %lx [%lu]\n", from->type, (unsigned long)kvec, from->iov_offset);
 
 	trace_printk("iter 0x%lx len %lu : base %lx [%lx] iov len %lu off %lx\n", (unsigned long)from, len,
 		(unsigned long)virt_to_page(kvec->iov_base),
@@ -598,7 +598,6 @@ static inline ssize_t kvec_get_frag_advance(struct iov_iter *from,
 	*off = (unsigned long)kvec->iov_base & (~PAGE_MASK);
 	get_page(*page);
 
-	trace_printk("...\n");
 	if (len >= kvec->iov_len) {
 		copied = kvec->iov_len;
 		kvec->iov_len = 0;
@@ -618,7 +617,9 @@ int skb_zerocopy_sg_from_iter(struct sock *sk, struct sk_buff *skb,
 			    struct iov_iter *from, size_t len)
 {
 	int frag = skb_shinfo(skb)->nr_frags;
+
 	trace_printk("collecting Frags skb %p [%p -> %lu]\n", skb, from, len);
+
 	while (len && iov_iter_count(from)) {
 		struct page *page = NULL;
 		unsigned long truesize;
@@ -644,6 +645,7 @@ int skb_zerocopy_sg_from_iter(struct sock *sk, struct sk_buff *skb,
 			refcount_add(truesize, &skb->sk->sk_wmem_alloc);
 		}
 		skb_fill_page_desc(skb, frag++, page, offset, copied);
+		trace_printk("skb %p nr frags %d\n", skb, frag);
 	}
 	return 0;
 }
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 3f8ace4d9..33396557f 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -1044,6 +1044,7 @@ void sock_kern_zerocopy_cb(struct ubuf_info *uarg, bool success)
 	int i, num_frags = skb_shinfo(skb)->nr_frags;
 
 	trace_printk("%s skb: %p freeing pages[%d]...\n", __FUNCTION__, skb, num_frags);
+#if 0
 	for (i = 0; i < num_frags; i++) {
 		skb_frag_t *f = &skb_shinfo(skb)->frags[i];
 		trace_printk("put %lx head [%lx]\n", (unsigned long)f->page.p, (unsigned long)compound_head(f->page.p));
@@ -1051,6 +1052,7 @@ void sock_kern_zerocopy_cb(struct ubuf_info *uarg, bool success)
 	}
 	consume_skb(skb);
 	sock_put(sk);
+#endif
 }
 EXPORT_SYMBOL(sock_kern_zerocopy_cb);
 
diff --git a/net/socket.c b/net/socket.c
index 34ee10c6d..f8ab1d08e 100644
--- a/net/socket.c
+++ b/net/socket.c
@@ -663,6 +663,14 @@ int sock_sendmsg(struct socket *sock, struct msghdr *msg)
 }
 EXPORT_SYMBOL(sock_sendmsg);
 
+int trace_sendmsg(struct socket *sock, struct msghdr *msg,
+		   struct kvec *vec, size_t num, size_t size)
+{
+	trace_printk("Sendung vec %lx\n", (unsigned long)vec);
+	return kernel_sendmsg(sock, msg, vec, num, size);
+}
+EXPORT_SYMBOL(trace_sendmsg);
+
 int kernel_sendmsg(struct socket *sock, struct msghdr *msg,
 		   struct kvec *vec, size_t num, size_t size)
 {
-- 
2.17.1

