From 11cace75d3c550609fff819729e03cc310e65ebd Mon Sep 17 00:00:00 2001
From: Build VM <build@example.com>
Date: Fri, 3 Jan 2020 14:42:35 +0000
Subject: [PATCH 22/24] debugging skb_copy_ubufs

---
 include/linux/skbuff.h | 17 +++++++++++++++--
 net/core/datagram.c    |  2 +-
 net/core/skbuff.c      |  4 ++--
 3 files changed, 18 insertions(+), 5 deletions(-)

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 53e2802e6..03756c4c7 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -427,8 +427,12 @@ enum {
 
 	/* generate software time stamp when entering packet scheduling */
 	SKBTX_SCHED_TSTAMP = 1 << 6,
+
+	/* spliced fargs  */
+	SKBTX_KERN_ZEROCOPY = 1 << 3,
 };
 
+#define SKBTX_KERN_ZEROCOPY_FRAG	(SKBTX_DEV_ZEROCOPY | SKBTX_KERN_ZEROCOPY)
 #define SKBTX_ZEROCOPY_FRAG	(SKBTX_DEV_ZEROCOPY | SKBTX_SHARED_FRAG)
 #define SKBTX_ANY_SW_TSTAMP	(SKBTX_SW_TSTAMP    | \
 				 SKBTX_SCHED_TSTAMP)
@@ -1281,6 +1285,14 @@ static inline struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
 	return &skb_shinfo(skb)->hwtstamps;
 }
 
+static inline struct ubuf_info *skb_kern_zcopy(struct sk_buff *skb)
+{
+	bool is_zcopy = skb && skb_shinfo(skb)->tx_flags & SKBTX_KERN_ZEROCOPY;
+
+	return is_zcopy ? skb_uarg(skb) : NULL;
+}
+
+
 static inline struct ubuf_info *skb_zcopy(struct sk_buff *skb)
 {
 	bool is_zcopy = skb && skb_shinfo(skb)->tx_flags & SKBTX_DEV_ZEROCOPY;
@@ -1293,7 +1305,7 @@ static inline void skb_zcopy_set(struct sk_buff *skb, struct ubuf_info *uarg)
 	if (skb && uarg && !skb_zcopy(skb)) {
 		sock_zerocopy_get(uarg);
 		skb_shinfo(skb)->destructor_arg = uarg;
-		skb_shinfo(skb)->tx_flags |= SKBTX_ZEROCOPY_FRAG;
+		skb_shinfo(skb)->tx_flags |= SKBTX_KERN_ZEROCOPY_FRAG;
 	}
 }
 
@@ -1301,6 +1313,7 @@ static inline void skb_zcopy_set_nouarg(struct sk_buff *skb, void *val)
 {
 	skb_shinfo(skb)->destructor_arg = (void *)((uintptr_t) val | 0x1UL);
 	skb_shinfo(skb)->tx_flags |= SKBTX_ZEROCOPY_FRAG;
+	trace_printk("!!!!FixMe...\n");
 }
 
 static inline bool skb_zcopy_is_nouarg(struct sk_buff *skb)
@@ -2561,7 +2574,7 @@ static inline  void skb_orphan(struct sk_buff *skb)
  */
 static inline int skb_orphan_frags(struct sk_buff *skb, gfp_t gfp_mask)
 {
-	if (likely(!skb_zcopy(skb)))
+	if (likely(!skb_zcopy(skb) || skb_kern_zcopy(skb) ))
 		return 0;
 	if (!skb_zcopy_is_nouarg(skb) &&
 	    skb_uarg(skb)->callback == sock_zerocopy_callback)
diff --git a/net/core/datagram.c b/net/core/datagram.c
index be851c9cc..e2a7def3b 100644
--- a/net/core/datagram.c
+++ b/net/core/datagram.c
@@ -618,7 +618,7 @@ int skb_zerocopy_sg_from_iter(struct sock *sk, struct sk_buff *skb,
 			    struct iov_iter *from, size_t len)
 {
 	int frag = skb_shinfo(skb)->nr_frags;
-	trace_printk("collecting Frags %p [%p -> %lu]\n", skb, from, len);
+	trace_printk("collecting Frags skb %p [%p -> %lu]\n", skb, from, len);
 	while (len && iov_iter_count(from)) {
 		struct page *page = NULL;
 		unsigned long truesize;
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 5b038ea09..3f8ace4d9 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -1043,7 +1043,7 @@ void sock_kern_zerocopy_cb(struct ubuf_info *uarg, bool success)
 	struct sock *sk = skb->sk;
 	int i, num_frags = skb_shinfo(skb)->nr_frags;
 
-	trace_printk("%s %p freeing pages[%d]...\n", __FUNCTION__, skb, num_frags);
+	trace_printk("%s skb: %p freeing pages[%d]...\n", __FUNCTION__, skb, num_frags);
 	for (i = 0; i < num_frags; i++) {
 		skb_frag_t *f = &skb_shinfo(skb)->frags[i];
 		trace_printk("put %lx head [%lx]\n", (unsigned long)f->page.p, (unsigned long)compound_head(f->page.p));
@@ -1165,7 +1165,7 @@ static int skb_zerocopy_clone(struct sk_buff *nskb, struct sk_buff *orig,
 			      gfp_t gfp_mask)
 {
 	if (skb_zcopy(orig)) {
-		if (skb_zcopy(nskb)) {
+		if (skb_zcopy(nskb) && !skb_kern_zcopy(nskb)) {
 			/* !gfp_mask callers are verified to !skb_zcopy(nskb) */
 			if (!gfp_mask) {
 				WARN_ON_ONCE(1);
-- 
2.17.1

