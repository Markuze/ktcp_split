From e53be2940c80343408c28246bcd210295b5c6586 Mon Sep 17 00:00:00 2001
From: Build VM <build@example.com>
Date: Sun, 29 Dec 2019 14:55:00 +0000
Subject: [PATCH 14/24] fixxing zcopy errors

---
 mm/page_alloc.c |  2 --
 net/ipv4/tcp.c  | 18 ++++++++++++++----
 2 files changed, 14 insertions(+), 6 deletions(-)

diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 9769e8281..9a1b9f89e 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -4387,14 +4387,12 @@ void *page_frag_alloc(struct page_frag_cache *nc,
 		nc->pfmemalloc = page_is_pfmemalloc(page);
 		nc->pagecnt_bias = size + 1;
 		nc->offset = size;
-		trace_printk("%d) new page %p [%d:%d]\n", smp_processor_id(), page, page_ref_count(page), nc->pagecnt_bias);
 	}
 
 	offset = nc->offset - fragsz;
 	if (unlikely(offset < 0)) {
 		page = virt_to_page(nc->va);
 
-		trace_printk("%d) try reuse page %p [%d:%d]\n", smp_processor_id(), page, page_ref_count(page), nc->pagecnt_bias);
 		if (!page_ref_sub_and_test(page, nc->pagecnt_bias))
 			goto refill;
 
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index bd7c477fd..1bffdb8bb 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -3687,7 +3687,7 @@ struct kvec_desc {
 
 int skb_zerocopy_rx(read_descriptor_t *desc_t, struct sk_buff *skb, u32 offset, size_t len)
 {
-	int copied = 0;
+	int copied = 0, skipped = 0;
 	const skb_frag_t *frags;
 	struct kvec_desc *desc = container_of(desc_t, struct kvec_desc, desc_t);
 
@@ -3709,7 +3709,7 @@ int skb_zerocopy_rx(read_descriptor_t *desc_t, struct sk_buff *skb, u32 offset,
 		len -= copied;
 
 		get_page_unless_zero(virt_to_page(skb->head));
-		trace_printk("Head: %p<%d> [%lu/%d] [%d,%d] (?%d)",
+		trace_printk("Head: %p<%d> [%lu/%lu] [%d,%d] (?%d)",
 				virt_to_head_page(desc->pages_array->iov_base),
 				page_count(virt_to_page(desc->pages_array->iov_base)),
 				desc->pages_array->iov_len, len, copied, desc->nr_pages, offset);
@@ -3720,29 +3720,38 @@ int skb_zerocopy_rx(read_descriptor_t *desc_t, struct sk_buff *skb, u32 offset,
 	}
 
 	len = skb->data_len - offset;
+	if (unlikely(!len))
+		return -EINVAL;
+
 	frags = skb_shinfo(skb)->frags;
 	while (offset) {
 		if (frags->size > offset)
 			break;
 		offset -= frags->size;
+		skipped++;
 		frags++;
 	}
 
+	trace_printk("Collecting frags: %d [%d] of %u len %lu\n", skb_shinfo(skb)->nr_frags, skipped, offset, len);
+
 	while (desc->nr_pages) {
+		if (unlikely(!(skb_shinfo(skb)->nr_frags -skipped)))
+			break;
 		__skb_frag_ref(frags);
 		desc->pages_array->iov_base = skb_frag_address(frags) + offset;
 		desc->pages_array->iov_len = skb_frag_size(frags) - offset;
 
-		offset = 0;
 
 		len -= skb_frag_size(frags);
 		copied += skb_frag_size(frags);
 
-		trace_printk("Frag: %p[%d]<%d> [%lu/%d] [%d,%d]",
+		trace_printk("Frag: %p = %p [%d]<%d> [%lu/%lu] [%d,%d]",
+				skb_frag_page(frags),
 				virt_to_head_page(desc->pages_array->iov_base), frags->page_offset + offset,
 				page_count(virt_to_page(desc->pages_array->iov_base)),
 				desc->pages_array->iov_len, len, copied, desc->nr_pages);
 
+		offset = 0;
 		desc->pages_array++;
 		desc->nr_pages--;
 		frags++;
@@ -3750,6 +3759,7 @@ int skb_zerocopy_rx(read_descriptor_t *desc_t, struct sk_buff *skb, u32 offset,
 		if (len <= 0)
 			break;
 	}
+
 	desc_t->count = desc->nr_pages;
 	return copied;
 }
-- 
2.17.1

