From 713e23b7ba8d4b7ee7db02545708f1c1301af33f Mon Sep 17 00:00:00 2001
From: Build VM <build@example.com>
Date: Sun, 15 Dec 2019 16:52:57 +0000
Subject: [PATCH 03/24] debugging proc

---
 Makefile                 |   2 +-
 drivers/net/virtio_net.c | 104 ++++++++++++++++++++++++++++++++++-----
 2 files changed, 94 insertions(+), 12 deletions(-)

diff --git a/Makefile b/Makefile
index 1fe5d2a2c..d69a321d0 100644
--- a/Makefile
+++ b/Makefile
@@ -2,7 +2,7 @@
 VERSION = 4
 PATCHLEVEL = 15
 SUBLEVEL = 18
-EXTRAVERSION =
+EXTRAVERSION = '-cbn'
 NAME = Fearless Coyote
 
 # *DOCUMENTATION*
diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index fddc4db08..52162a1df 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -32,7 +32,12 @@
 #include <linux/filter.h>
 #include <net/route.h>
 
-static int napi_weight = NAPI_POLL_WEIGHT;
+
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#include <linux/string.h>
+
+static int napi_weight = 4; //NAPI_POLL_WEIGHT;
 module_param(napi_weight, int, 0444);
 
 static bool csum = true, gso = true, napi_tx;
@@ -71,9 +76,12 @@ struct virtnet_stats {
 	struct u64_stats_sync rx_syncp;
 	u64 tx_bytes;
 	u64 tx_packets;
+	u64 tx_kick;
 
 	u64 rx_bytes;
 	u64 rx_packets;
+	u64 rx_napi;
+	u64 rx_napi_complete;
 };
 
 /* Internal representation of a send virtqueue */
@@ -1179,7 +1187,7 @@ static int virtnet_receive(struct receive_queue *rq, int budget, bool *xdp_xmit)
 	return received;
 }
 
-/*static*/ void free_old_xmit_skbs(struct send_queue *sq)
+static void free_old_xmit_skbs(struct send_queue *sq)
 {
 	struct sk_buff *skb;
 	unsigned int len;
@@ -1219,7 +1227,7 @@ static bool is_xdp_raw_buffer_queue(struct virtnet_info *vi, int q)
 		return false;
 }
 
-static void virtnet_poll_cleantx(struct receive_queue *rq)
+static inline void virtnet_poll_cleantx(struct receive_queue *rq)
 {
 	struct virtnet_info *vi = rq->vq->vdev->priv;
 	unsigned int index = vq2rxq(rq->vq);
@@ -1238,26 +1246,42 @@ static void virtnet_poll_cleantx(struct receive_queue *rq)
 		netif_tx_wake_queue(txq);
 }
 
+static int max = 4;
 /*MA: RX NAPI CB */
 static int virtnet_poll(struct napi_struct *napi, int budget)
 {
 	struct receive_queue *rq =
 		container_of(napi, struct receive_queue, napi);
 	struct virtnet_info *vi = rq->vq->vdev->priv;
+	struct virtnet_stats *stats = this_cpu_ptr(vi->stats);
 	struct send_queue *sq;
 	unsigned int received, qp;
 	bool xdp_xmit = false;
 
-	virtnet_poll_cleantx(rq);
+	//virtnet_poll_cleantx(rq);
 
-	received = virtnet_receive(rq, budget, &xdp_xmit);
+	stats->rx_napi++;
+	received = virtnet_receive(rq, budget << 1, &xdp_xmit);
 
 	/* Out of packets? */
-	if (received < budget)
+	if (received < budget) {
 		virtqueue_napi_complete(napi, rq->vq, received);
+		stats->rx_napi_complete++;
+		napi->weight = (received < 4) ? 4 : received;
+	} else {
+		/* Received will not exceed budget...*/
+		napi->weight = (received > 64) ? 64 : received;
+	}
 
-	trace_printk("Budget %d received %d\n", budget, received);
-	napi->weight = received;
+#if 0
+	if (napi->weight != weight) {
+		//trace_printk("Budget %d received %d (%d) in %s\n", budget, received, weight, in_serving_softirq() ? "SOFTIRQ": "WTF?");
+		napi->weight = weight;
+	}
+#endif
+	if (unlikely(napi->weight > max)) {
+		max = napi->weight;
+	}
 
 	if (xdp_xmit) {
 		qp = vi->curr_queue_pairs - vi->xdp_queue_pairs +
@@ -1326,7 +1350,7 @@ static int virtnet_poll_tx(struct napi_struct *napi, int budget)
 static int xmit_skb(struct send_queue *sq, struct sk_buff *skb)
 {
 	struct virtio_net_hdr_mrg_rxbuf *hdr;
-	const unsigned char *dest = ((struct ethhdr *)skb->data)->h_dest;
+	//const unsigned char *dest = ((struct ethhdr *)skb->data)->h_dest;
 	struct virtnet_info *vi = sq->vq->vdev->priv;
 	int num_sg;
 	unsigned hdr_len = vi->hdr_len;
@@ -1425,8 +1449,11 @@ static netdev_tx_t start_xmit(struct sk_buff *skb, struct net_device *dev)
 		}
 	}
 
-	if (kick || netif_xmit_stopped(txq))
+	if (kick || netif_xmit_stopped(txq)) {
+		 struct virtnet_stats *stats = this_cpu_ptr(vi->stats);
+		stats->tx_kick++;
 		virtqueue_kick(sq->vq);
+	}
 
 	return NETDEV_TX_OK;
 }
@@ -2598,6 +2625,44 @@ static int virtnet_validate(struct virtio_device *vdev)
 	return 0;
 }
 
+static int virtio_net_show(struct seq_file *m, void *v)
+{
+	struct virtnet_info *vi;
+	int cpu;
+	u64 tx_kick  = 0 , rx_napi  = 0 , rx_napi_complete  = 0 , tx_packets = 0 , rx_packets = 0;
+	vi = m->private;
+
+        seq_printf(m, "Poll Max: %d\n", max);
+
+	for_each_possible_cpu(cpu) {
+		struct virtnet_stats *stats = per_cpu_ptr(vi->stats, cpu);
+		tx_kick			+= stats->tx_kick;
+		tx_packets		+= stats->tx_packets;
+		rx_napi			+= stats->rx_napi;
+		rx_napi_complete	+= stats->rx_napi_complete;
+		rx_packets		+= stats->rx_packets;
+	}
+	seq_printf(m, "RX:\n\t%-20lld\n\t%-20lld\n\t%-20lld\n", rx_packets, rx_napi, rx_napi_complete);
+	seq_printf(m, "TX:\n\t%-20lld\n\t%-20lld\n", tx_packets, tx_kick);
+        return 0;
+}
+
+static int virtio_net_open(struct inode *inode, struct  file *file)
+{
+        return single_open(file, virtio_net_show, PDE_DATA(inode));
+}
+
+static const struct file_operations stats_fops = {
+        .owner          = THIS_MODULE,
+        .open           = virtio_net_open,
+	.llseek         = seq_lseek,
+        .read           = seq_read,
+        .release        = single_release,
+};
+
+static struct proc_dir_entry *virtio_net_dir;
+
+
 static int virtnet_probe(struct virtio_device *vdev)
 {
 	int i, err;
@@ -2789,7 +2854,9 @@ static int virtnet_probe(struct virtio_device *vdev)
 		if (virtio_has_feature(vi->vdev, guest_offloads[i]))
 			set_bit(guest_offloads[i], &vi->guest_offloads);
 
-	pr_debug("virtnet: registered device %s with %d RX and TX vq's\n",
+	if (!proc_create_data(dev->name, 00444, virtio_net_dir, &stats_fops, vi))
+		pr_err("Failed to create %s\n", dev->name);
+	pr_info("virtnet: registered device %s with %d RX and TX vq's\n",
 		 dev->name, max_queue_pairs);
 
 	return 0;
@@ -2913,6 +2980,16 @@ static struct virtio_driver virtio_net_driver = {
 #endif
 };
 
+static __init int virtio_net_proc_init(void)
+{
+	virtio_net_dir = proc_mkdir_mode("virtio_net", 00555, NULL);
+	if (!virtio_net_dir) {
+		pr_err("couldnt create virtio_net_dir\n");
+		return -1;
+	}
+	return 0;
+}
+
 static __init int virtio_net_driver_init(void)
 {
 	int ret;
@@ -2931,6 +3008,8 @@ static __init int virtio_net_driver_init(void)
         ret = register_virtio_driver(&virtio_net_driver);
 	if (ret)
 		goto err_virtio;
+
+	virtio_net_proc_init();
 	return 0;
 err_virtio:
 	cpuhp_remove_multi_state(CPUHP_VIRT_NET_DEAD);
@@ -2943,6 +3022,9 @@ module_init(virtio_net_driver_init);
 
 static __exit void virtio_net_driver_exit(void)
 {
+	if (virtio_net_dir)
+		remove_proc_subtree("virtio_net", NULL);
+
 	unregister_virtio_driver(&virtio_net_driver);
 	cpuhp_remove_multi_state(CPUHP_VIRT_NET_DEAD);
 	cpuhp_remove_multi_state(virtionet_online);
-- 
2.17.1

