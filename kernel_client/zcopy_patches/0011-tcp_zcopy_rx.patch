From 0baaa49fd5d00c6927f89af95789bbd3347041ef Mon Sep 17 00:00:00 2001
From: Build VM <build@example.com>
Date: Sat, 28 Dec 2019 11:49:27 +0000
Subject: [PATCH 11/24] tcp_zcopy_rx

---
 net/ipv4/tcp.c | 94 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 94 insertions(+)

diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index d4ec0e5cb..e1369c304 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -3678,3 +3678,97 @@ void __init tcp_init(void)
 	BUG_ON(tcp_register_congestion_control(&tcp_reno) != 0);
 	tcp_tasklet_init();
 }
+
+void tcp_zcopy_rx(struct socket *sock, struct page **pages_array, unsigned int nr_pages)
+{
+	struct sock *sk = sock->sk;
+	const skb_frag_t *frags;
+	u32 seq, len, offset, nr = 0;
+	struct tcp_sock *tp;
+	struct sk_buff *skb;
+	int rc = -ENOTCONN;
+
+	lock_sock(sk);
+
+	if (sk->sk_state == TCP_LISTEN)
+		goto out;
+
+	sock_rps_record_flow(sk);
+
+	tp = tcp_sk(sk);
+	seq = tp->copied_seq;
+#if 0
+	unsigned long size = nr_pages << PAGE_SHIFT;
+
+	/* We dont actually care, accept everything...*/
+	if (tcp_inq(sk) < size) {
+		ret = sock_flag(sk, SOCK_DONE) ? -EIO : -EAGAIN;
+		goto out;
+	}
+	/* Abort if urgent data is in the area  --- Hmm.....*/
+	if (unlikely(tp->urg_data)) {
+		u32 urg_offset = tp->urg_seq - seq;
+
+		ret = -EINVAL;
+		if (urg_offset < size)
+			goto out;
+	}
+#endif
+	skb = tcp_recv_skb(sk, seq, &offset);
+	rc = -EINVAL;
+skb_start:
+	offset -= skb_headlen(skb);
+	/* Linear data present... - Handle it or Fix virtio */
+	if ((int)offset < 0)
+		goto out;
+	/* frag list present ? eehnmmm... gro wtf?*/
+	if (skb_has_frag_list(skb))
+		goto out;
+	len = skb->data_len - offset;
+	frags = skb_shinfo(skb)->frags;
+	while (offset) {
+		if (frags->size > offset)
+			goto out;
+		offset -= frags->size;
+		frags++;
+	}
+	while (nr < nr_pages) {
+		if (len) {
+			if (len < PAGE_SIZE)
+				goto out;
+			if (frags->size != PAGE_SIZE || frags->page_offset)
+				goto out;
+			pages_array[nr++] = skb_frag_page(frags);
+			frags++;
+			len -= PAGE_SIZE;
+			seq += PAGE_SIZE;
+			continue;
+		}
+		skb = skb->next;
+		offset = seq - TCP_SKB_CB(skb)->seq;
+		goto skb_start;
+	}
+#if 0
+       /* Ok now we need to get these pages...*/
+       for (nr = 0; nr < nr_pages; nr++) {
+               ret = vm_insert_page(vma, vma->vm_start + (nr << PAGE_SHIFT),
+                                    pages_array[nr]);
+               if (ret)
+                       goto out;
+       }
+#endif
+	/* operation is complete, we can 'consume' all skbs */
+	tp->copied_seq = seq;
+	tcp_rcv_space_adjust(sk);
+
+	/* Clean up data we have read: This will do ACK frames. */
+	tcp_recv_skb(sk, seq, &offset);
+	//TODO: need to account for all received bytes...
+	//tcp_cleanup_rbuf(sk, size);
+
+	rc = 0;
+out:
+	release_sock(sk);
+
+	return rc;
+}
-- 
2.17.1

